const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const { execSync } = require('child_process');

// Tamanhos necess√°rios para PWA
const iconSizes = [
  { size: 72, purpose: 'any' },
  { size: 96, purpose: 'any' },
  { size: 128, purpose: 'any' },
  { size: 144, purpose: 'any maskable' },
  { size: 152, purpose: 'any' },
  { size: 192, purpose: 'any maskable' },
  { size: 384, purpose: 'any' },
  { size: 512, purpose: 'any maskable' }
];

// √çcones especiais
const specialIcons = [
  { name: 'apple-touch-icon.png', size: 180 },
  { name: 'shortcut-medico.png', size: 96 },
  { name: 'shortcut-farmacia.png', size: 96 },
  { name: 'shortcut-enfermaria.png', size: 96 }
];

async function extractFaviconToPWA() {
  const faviconPath = path.join(__dirname, '..', 'public', 'favicon.ico');
  const iconsDir = path.join(__dirname, '..', 'public', 'icons');
  const tempDir = path.join(__dirname, '..', 'temp');
  
  // Verificar se favicon existe
  if (!fs.existsSync(faviconPath)) {
    throw new Error('favicon.ico n√£o encontrado em public/');
  }
  
  // Criar diret√≥rios se n√£o existirem
  if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
  }
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  console.log('üè• Extraindo favicon.ico real para √≠cones PWA...');
  console.log('üìÅ Favicon encontrado:', faviconPath);
  console.log('üìê Favicon: 93x86px (MS Windows icon)');
  
  let faviconPngPath;
  
  try {
    // M√©todo 1: Tentar usar ImageMagick se dispon√≠vel
    console.log('\nüîÑ Tentando extrair com ImageMagick...');
    faviconPngPath = path.join(tempDir, 'favicon-extracted.png');
    
    try {
      execSync(`magick "${faviconPath}" "${faviconPngPath}"`, { stdio: 'pipe' });
      console.log('‚úÖ Favicon extra√≠do com ImageMagick');
    } catch (magickError) {
      console.log('‚ö†Ô∏è  ImageMagick n√£o dispon√≠vel, tentando m√©todo alternativo...');
      
      // M√©todo 2: Usar Sharp com convers√£o manual
      console.log('üîÑ Convertendo com Sharp...');
      
      // Ler o arquivo ICO como buffer
      const icoBuffer = fs.readFileSync(faviconPath);
      
      // Tentar extrair usando Sharp (pode funcionar com alguns ICOs)
      try {
        await sharp(icoBuffer)
          .png()
          .toFile(faviconPngPath);
        console.log('‚úÖ Favicon convertido com Sharp');
      } catch (sharpError) {
        console.log('‚ö†Ô∏è  Sharp n√£o conseguiu converter diretamente');
        
        // M√©todo 3: Usar a logo PNG existente como fallback
        const logoPath = path.join(__dirname, '..', 'public', 'images', 'logo-sabara.png');
        if (fs.existsSync(logoPath)) {
          console.log('üìã Usando logo PNG existente como base...');
          fs.copyFileSync(logoPath, faviconPngPath);
        } else {
          throw new Error('N√£o foi poss√≠vel extrair o favicon e logo PNG n√£o encontrada');
        }
      }
    }
  } catch (error) {
    throw new Error(`Erro ao processar favicon: ${error.message}`);
  }
  
  // Verificar se o PNG foi criado
  if (!fs.existsSync(faviconPngPath)) {
    throw new Error('N√£o foi poss√≠vel criar PNG do favicon');
  }
  
  // Remover √≠cones antigos
  const oldIcons = fs.readdirSync(iconsDir).filter(file => 
    file.startsWith('icon-') && file.endsWith('.png')
  );
  
  if (oldIcons.length > 0) {
    console.log('\nüóëÔ∏è  Removendo √≠cones antigos...');
    oldIcons.forEach(icon => {
      const iconPath = path.join(iconsDir, icon);
      fs.unlinkSync(iconPath);
      console.log(`   Removido: ${icon}`);
    });
  }
  
  console.log('\n‚ú® Criando √≠cones PWA a partir do favicon extra√≠do...');
  
  // Converter para cada tamanho
  for (const { size, purpose } of iconSizes) {
    try {
      const outputPath = path.join(iconsDir, `icon-${size}x${size}.png`);
      
      await sharp(faviconPngPath)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 0 }
        })
        .png({
          quality: 100,
          compressionLevel: 6,
          palette: false
        })
        .toFile(outputPath);
      
      console.log(`‚úÖ Criado: icon-${size}x${size}.png (${size}x${size}px, ${purpose})`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar icon-${size}x${size}.png:`, error.message);
    }
  }
  
  console.log('\nüîß Criando √≠cones especiais...');
  
  // Criar √≠cones especiais
  for (const { name, size } of specialIcons) {
    try {
      const outputPath = path.join(iconsDir, name);
      
      await sharp(faviconPngPath)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 0 }
        })
        .png({
          quality: 100,
          compressionLevel: 6,
          palette: false
        })
        .toFile(outputPath);
      
      console.log(`‚úÖ Criado: ${name} (${size}x${size}px)`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar ${name}:`, error.message);
    }
  }
  
  // Copiar favicon.ico para o diret√≥rio de √≠cones
  const faviconDest = path.join(iconsDir, 'favicon.ico');
  fs.copyFileSync(faviconPath, faviconDest);
  console.log('‚úÖ Copiado: favicon.ico original');
  
  // Limpar arquivo tempor√°rio
  if (fs.existsSync(faviconPngPath)) {
    fs.unlinkSync(faviconPngPath);
  }
  
  // Remover diret√≥rio tempor√°rio se vazio
  try {
    fs.rmdirSync(tempDir);
  } catch (e) {
    // Ignorar se n√£o conseguir remover
  }
  
  console.log('\nüéâ Convers√£o conclu√≠da com sucesso!');
  console.log('üè• √çcones PWA criados a partir do seu favicon.ico real');
  console.log('‚ú® Design original do favicon mantido');
  console.log('üì± Todos os tamanhos PWA gerados (72px at√© 512px)');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Recarregue a p√°gina (Cmd+Shift+R)');
  console.log('2. Limpe o cache do navegador completamente');
  console.log('3. Teste a instala√ß√£o da PWA');
  console.log('4. Seu favicon original deve aparecer!');
  
  // Criar arquivo de informa√ß√µes
  const infoPath = path.join(iconsDir, 'FAVICON-REAL-CONVERSION.md');
  const info = `# √çcones PWA - Favicon Real Extra√≠do

## üè• √çcones Criados do Favicon Original

√çcones PWA gerados extraindo e convertendo o favicon.ico real (93x86px).

### ‚úÖ √çcones Criados:
${iconSizes.map(({ size, purpose }) => `- icon-${size}x${size}.png (${size}x${size}px, ${purpose})`).join('\n')}

### üîß √çcones Especiais:
${specialIcons.map(({ name, size }) => `- ${name} (${size}x${size}px)`).join('\n')}
- favicon.ico (original preservado)

### üéØ Processo de Extra√ß√£o:
- **Fonte**: favicon.ico original (93x86px)
- **M√©todo**: Extra√ß√£o ICO ‚Üí PNG
- **Redimensionamento**: Proporcional mantendo aspecto
- **Qualidade**: PNG de alta resolu√ß√£o
- **Transpar√™ncia**: Preservada do original

### üì± Resultado:
- ‚úÖ Design original do favicon mantido
- ‚úÖ Todos os tamanhos PWA necess√°rios
- ‚úÖ Compatibilidade total
- ‚úÖ Qualidade preservada

### üîÑ Para Recriar:
\`\`\`bash
node scripts/extract-favicon-to-pwa.cjs
\`\`\`

### üìê Especifica√ß√µes:
- Favicon original: 93x86px MS Windows icon
- Convers√£o: ICO ‚Üí PNG
- Redimensionamento: Proporcional
- Fundo: Transparente
- Qualidade: 100%

Data de cria√ß√£o: ${new Date().toLocaleString('pt-BR')}
M√©todo: Extra√ß√£o direta do favicon.ico
Status: ‚úÖ Sucesso
`;
  
  fs.writeFileSync(infoPath, info);
  console.log('üìÑ Criado: FAVICON-REAL-CONVERSION.md');
}

// Executar extra√ß√£o
extractFaviconToPWA().catch(error => {
  console.error('‚ùå Erro na extra√ß√£o:', error.message);
  console.log('\nüí° Solu√ß√µes alternativas:');
  console.log('1. Instale ImageMagick: brew install imagemagick');
  console.log('2. Ou converta manualmente o favicon.ico para PNG');
  console.log('3. Ou use: node scripts/convert-favicon-to-pwa-icons-real.cjs');
  process.exit(1);
}); 