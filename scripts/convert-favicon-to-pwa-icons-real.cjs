const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// Tamanhos necess√°rios para PWA
const iconSizes = [
  { size: 72, purpose: 'any' },
  { size: 96, purpose: 'any' },
  { size: 128, purpose: 'any' },
  { size: 144, purpose: 'any maskable' },
  { size: 152, purpose: 'any' },
  { size: 192, purpose: 'any maskable' },
  { size: 384, purpose: 'any' },
  { size: 512, purpose: 'any maskable' }
];

// √çcones especiais
const specialIcons = [
  { name: 'apple-touch-icon.png', size: 180 },
  { name: 'shortcut-medico.png', size: 96 },
  { name: 'shortcut-farmacia.png', size: 96 },
  { name: 'shortcut-enfermaria.png', size: 96 }
];

async function convertFaviconToPWAIcons() {
  const faviconPath = path.join(__dirname, '..', 'public', 'favicon.ico');
  const iconsDir = path.join(__dirname, '..', 'public', 'icons');
  
  // Verificar se favicon existe
  if (!fs.existsSync(faviconPath)) {
    throw new Error('favicon.ico n√£o encontrado em public/');
  }
  
  // Criar diret√≥rio se n√£o existir
  if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
  }
  
  console.log('üè• Convertendo favicon.ico real para √≠cones PWA...');
  console.log('üìÅ Favicon encontrado:', faviconPath);
  
  // Tentar ler o favicon com Sharp
  let faviconBuffer;
  try {
    // Primeiro, vamos tentar converter o ICO para PNG
    faviconBuffer = await sharp(faviconPath)
      .png()
      .toBuffer();
    
    const faviconInfo = await sharp(faviconBuffer).metadata();
    console.log(`üìê Favicon original: ${faviconInfo.width}x${faviconInfo.height}px`);
  } catch (error) {
    console.log('‚ö†Ô∏è  Favicon ICO n√£o suportado diretamente pelo Sharp');
    console.log('üí° Tentando extrair a maior resolu√ß√£o dispon√≠vel...');
    
    // Se falhar, vamos tentar uma abordagem diferente
    // Ler o arquivo ICO como buffer e tentar extrair
    try {
      const icoBuffer = fs.readFileSync(faviconPath);
      
      // Criar um PNG simples a partir do ICO usando uma abordagem alternativa
      // Vamos usar a logo PNG que j√° existe como fallback
      const logoPath = path.join(__dirname, '..', 'public', 'images', 'logo-sabara.png');
      if (fs.existsSync(logoPath)) {
        console.log('üìã Usando logo PNG como base para convers√£o...');
        faviconBuffer = await sharp(logoPath)
          .resize(256, 256, {
            fit: 'contain',
            background: { r: 255, g: 255, b: 255, alpha: 0 }
          })
          .png()
          .toBuffer();
      } else {
        throw new Error('N√£o foi poss√≠vel processar o favicon.ico e logo PNG n√£o encontrada');
      }
    } catch (fallbackError) {
      throw new Error(`Erro ao processar favicon: ${fallbackError.message}`);
    }
  }
  
  // Remover √≠cones antigos
  const oldIcons = fs.readdirSync(iconsDir).filter(file => 
    file.startsWith('icon-') && file.endsWith('.png')
  );
  
  if (oldIcons.length > 0) {
    console.log('\nüóëÔ∏è  Removendo √≠cones antigos...');
    oldIcons.forEach(icon => {
      const iconPath = path.join(iconsDir, icon);
      fs.unlinkSync(iconPath);
      console.log(`   Removido: ${icon}`);
    });
  }
  
  console.log('\n‚ú® Criando √≠cones PWA a partir do favicon...');
  
  // Converter para cada tamanho
  for (const { size, purpose } of iconSizes) {
    try {
      const outputPath = path.join(iconsDir, `icon-${size}x${size}.png`);
      
      await sharp(faviconBuffer)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 0 }
        })
        .png({
          quality: 100,
          compressionLevel: 6,
          palette: false
        })
        .toFile(outputPath);
      
      console.log(`‚úÖ Criado: icon-${size}x${size}.png (${size}x${size}px, ${purpose})`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar icon-${size}x${size}.png:`, error.message);
    }
  }
  
  console.log('\nüîß Criando √≠cones especiais...');
  
  // Criar √≠cones especiais
  for (const { name, size } of specialIcons) {
    try {
      const outputPath = path.join(iconsDir, name);
      
      await sharp(faviconBuffer)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 0 }
        })
        .png({
          quality: 100,
          compressionLevel: 6,
          palette: false
        })
        .toFile(outputPath);
      
      console.log(`‚úÖ Criado: ${name} (${size}x${size}px)`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar ${name}:`, error.message);
    }
  }
  
  // Copiar favicon.ico para o diret√≥rio de √≠cones
  const faviconDest = path.join(iconsDir, 'favicon.ico');
  fs.copyFileSync(faviconPath, faviconDest);
  console.log('‚úÖ Copiado: favicon.ico');
  
  console.log('\nüéâ Convers√£o conclu√≠da com sucesso!');
  console.log('üè• √çcones PWA criados a partir do seu favicon.ico');
  console.log('‚ú® Mantendo design original do favicon');
  console.log('üì± Todos os tamanhos PWA gerados');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Recarregue a p√°gina (Cmd+Shift+R)');
  console.log('2. Limpe o cache do navegador');
  console.log('3. Teste a instala√ß√£o da PWA');
  console.log('4. Seu favicon deve aparecer em todos os tamanhos!');
  
  // Criar arquivo de informa√ß√µes
  const infoPath = path.join(iconsDir, 'FAVICON-CONVERSION-INFO.md');
  const info = `# √çcones PWA - Convertidos do Favicon Real

## üè• √çcones Criados a partir do Favicon

√çcones PWA gerados convertendo o favicon.ico original.

### ‚úÖ √çcones Criados:
${iconSizes.map(({ size, purpose }) => `- icon-${size}x${size}.png (${size}x${size}px, ${purpose})`).join('\n')}

### üîß √çcones Especiais:
${specialIcons.map(({ name, size }) => `- ${name} (${size}x${size}px)`).join('\n')}
- favicon.ico (original copiado)

### üéØ Processo:
- **Fonte**: favicon.ico original
- **Convers√£o**: ICO ‚Üí PNG
- **Redimensionamento**: Proporcional para cada tamanho
- **Qualidade**: PNG de alta resolu√ß√£o
- **Transpar√™ncia**: Mantida do original

### üì± Compatibilidade:
- ‚úÖ Chrome, Firefox, Safari, Edge
- ‚úÖ Android, iOS, Windows, macOS
- ‚úÖ PWA installable
- ‚úÖ Manifest v√°lido
- ‚úÖ Design original do favicon

### üîÑ Para Recriar:
\`\`\`bash
node scripts/convert-favicon-to-pwa-icons-real.cjs
\`\`\`

### üìê Especifica√ß√µes:
- Fonte: public/favicon.ico
- Formato de sa√≠da: PNG
- Redimensionamento: Proporcional
- Fundo: Transparente
- Qualidade: 100%

Data de cria√ß√£o: ${new Date().toLocaleString('pt-BR')}
Ferramenta: Sharp + Favicon real
M√©todo: Convers√£o direta ICO ‚Üí PNG
`;
  
  fs.writeFileSync(infoPath, info);
  console.log('üìÑ Criado: FAVICON-CONVERSION-INFO.md com detalhes');
}

// Executar convers√£o
convertFaviconToPWAIcons().catch(error => {
  console.error('‚ùå Erro na convers√£o:', error.message);
  console.log('\nüí° Dicas para resolver:');
  console.log('1. Verifique se public/favicon.ico existe');
  console.log('2. Certifique-se que o arquivo n√£o est√° corrompido');
  console.log('3. Tente usar uma logo PNG como alternativa');
  process.exit(1);
}); 